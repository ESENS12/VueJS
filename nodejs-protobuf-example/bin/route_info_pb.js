// source: route_info.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var Define_pb = require('./Define_pb.js');
goog.object.extend(proto, Define_pb);
goog.exportSymbol('proto.ROUTEINFO.info', null, global);
goog.exportSymbol('proto.ROUTEINFO.info.bound', null, global);
goog.exportSymbol('proto.ROUTEINFO.info.line', null, global);
goog.exportSymbol('proto.ROUTEINFO.info.link', null, global);
goog.exportSymbol('proto.ROUTEINFO.info.location', null, global);
goog.exportSymbol('proto.ROUTEINFO.info.path', null, global);
goog.exportSymbol('proto.ROUTEINFO.info.route', null, global);
goog.exportSymbol('proto.ROUTEINFO.info.textvalue', null, global);
goog.exportSymbol('proto.ROUTEINFO.info.traffic_speed', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ROUTEINFO.info = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ROUTEINFO.info.repeatedFields_, null);
};
goog.inherits(proto.ROUTEINFO.info, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ROUTEINFO.info.displayName = 'proto.ROUTEINFO.info';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ROUTEINFO.info.location = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ROUTEINFO.info.location, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ROUTEINFO.info.location.displayName = 'proto.ROUTEINFO.info.location';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ROUTEINFO.info.textvalue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ROUTEINFO.info.textvalue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ROUTEINFO.info.textvalue.displayName = 'proto.ROUTEINFO.info.textvalue';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ROUTEINFO.info.bound = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ROUTEINFO.info.bound, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ROUTEINFO.info.bound.displayName = 'proto.ROUTEINFO.info.bound';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ROUTEINFO.info.line = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ROUTEINFO.info.line, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ROUTEINFO.info.line.displayName = 'proto.ROUTEINFO.info.line';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ROUTEINFO.info.traffic_speed = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ROUTEINFO.info.traffic_speed, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ROUTEINFO.info.traffic_speed.displayName = 'proto.ROUTEINFO.info.traffic_speed';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ROUTEINFO.info.link = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ROUTEINFO.info.link, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ROUTEINFO.info.link.displayName = 'proto.ROUTEINFO.info.link';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ROUTEINFO.info.path = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ROUTEINFO.info.path.repeatedFields_, null);
};
goog.inherits(proto.ROUTEINFO.info.path, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ROUTEINFO.info.path.displayName = 'proto.ROUTEINFO.info.path';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ROUTEINFO.info.route = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ROUTEINFO.info.route.repeatedFields_, null);
};
goog.inherits(proto.ROUTEINFO.info.route, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ROUTEINFO.info.route.displayName = 'proto.ROUTEINFO.info.route';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ROUTEINFO.info.repeatedFields_ = [10];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ROUTEINFO.info.prototype.toObject = function(opt_includeInstance) {
  return proto.ROUTEINFO.info.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ROUTEINFO.info} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ROUTEINFO.info.toObject = function(includeInstance, msg) {
  var f, obj = {
    routesList: jspb.Message.toObjectList(msg.getRoutesList(),
    proto.ROUTEINFO.info.route.toObject, includeInstance),
    status: jspb.Message.getFieldWithDefault(msg, 20, 0),
    statusMsg: jspb.Message.getFieldWithDefault(msg, 30, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ROUTEINFO.info}
 */
proto.ROUTEINFO.info.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ROUTEINFO.info;
  return proto.ROUTEINFO.info.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ROUTEINFO.info} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ROUTEINFO.info}
 */
proto.ROUTEINFO.info.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 10:
      var value = new proto.ROUTEINFO.info.route;
      reader.readMessage(value,proto.ROUTEINFO.info.route.deserializeBinaryFromReader);
      msg.addRoutes(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStatus(value);
      break;
    case 30:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatusMsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ROUTEINFO.info.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ROUTEINFO.info.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ROUTEINFO.info} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ROUTEINFO.info.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoutesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      proto.ROUTEINFO.info.route.serializeBinaryToWriter
    );
  }
  f = message.getStatus();
  if (f !== 0) {
    writer.writeInt32(
      20,
      f
    );
  }
  f = message.getStatusMsg();
  if (f.length > 0) {
    writer.writeString(
      30,
      f
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ROUTEINFO.info.location.prototype.toObject = function(opt_includeInstance) {
  return proto.ROUTEINFO.info.location.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ROUTEINFO.info.location} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ROUTEINFO.info.location.toObject = function(includeInstance, msg) {
  var f, obj = {
    lat: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    lng: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ROUTEINFO.info.location}
 */
proto.ROUTEINFO.info.location.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ROUTEINFO.info.location;
  return proto.ROUTEINFO.info.location.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ROUTEINFO.info.location} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ROUTEINFO.info.location}
 */
proto.ROUTEINFO.info.location.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLat(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLng(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ROUTEINFO.info.location.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ROUTEINFO.info.location.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ROUTEINFO.info.location} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ROUTEINFO.info.location.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLat();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getLng();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * optional double lat = 1;
 * @return {number}
 */
proto.ROUTEINFO.info.location.prototype.getLat = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ROUTEINFO.info.location} returns this
 */
proto.ROUTEINFO.info.location.prototype.setLat = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double lng = 2;
 * @return {number}
 */
proto.ROUTEINFO.info.location.prototype.getLng = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ROUTEINFO.info.location} returns this
 */
proto.ROUTEINFO.info.location.prototype.setLng = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ROUTEINFO.info.textvalue.prototype.toObject = function(opt_includeInstance) {
  return proto.ROUTEINFO.info.textvalue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ROUTEINFO.info.textvalue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ROUTEINFO.info.textvalue.toObject = function(includeInstance, msg) {
  var f, obj = {
    text: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ROUTEINFO.info.textvalue}
 */
proto.ROUTEINFO.info.textvalue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ROUTEINFO.info.textvalue;
  return proto.ROUTEINFO.info.textvalue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ROUTEINFO.info.textvalue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ROUTEINFO.info.textvalue}
 */
proto.ROUTEINFO.info.textvalue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ROUTEINFO.info.textvalue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ROUTEINFO.info.textvalue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ROUTEINFO.info.textvalue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ROUTEINFO.info.textvalue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getText();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional string text = 1;
 * @return {string}
 */
proto.ROUTEINFO.info.textvalue.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ROUTEINFO.info.textvalue} returns this
 */
proto.ROUTEINFO.info.textvalue.prototype.setText = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 value = 2;
 * @return {number}
 */
proto.ROUTEINFO.info.textvalue.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ROUTEINFO.info.textvalue} returns this
 */
proto.ROUTEINFO.info.textvalue.prototype.setValue = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ROUTEINFO.info.bound.prototype.toObject = function(opt_includeInstance) {
  return proto.ROUTEINFO.info.bound.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ROUTEINFO.info.bound} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ROUTEINFO.info.bound.toObject = function(includeInstance, msg) {
  var f, obj = {
    northeast: (f = msg.getNortheast()) && proto.ROUTEINFO.info.location.toObject(includeInstance, f),
    southwest: (f = msg.getSouthwest()) && proto.ROUTEINFO.info.location.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ROUTEINFO.info.bound}
 */
proto.ROUTEINFO.info.bound.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ROUTEINFO.info.bound;
  return proto.ROUTEINFO.info.bound.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ROUTEINFO.info.bound} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ROUTEINFO.info.bound}
 */
proto.ROUTEINFO.info.bound.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ROUTEINFO.info.location;
      reader.readMessage(value,proto.ROUTEINFO.info.location.deserializeBinaryFromReader);
      msg.setNortheast(value);
      break;
    case 2:
      var value = new proto.ROUTEINFO.info.location;
      reader.readMessage(value,proto.ROUTEINFO.info.location.deserializeBinaryFromReader);
      msg.setSouthwest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ROUTEINFO.info.bound.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ROUTEINFO.info.bound.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ROUTEINFO.info.bound} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ROUTEINFO.info.bound.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNortheast();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ROUTEINFO.info.location.serializeBinaryToWriter
    );
  }
  f = message.getSouthwest();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ROUTEINFO.info.location.serializeBinaryToWriter
    );
  }
};


/**
 * optional location northeast = 1;
 * @return {?proto.ROUTEINFO.info.location}
 */
proto.ROUTEINFO.info.bound.prototype.getNortheast = function() {
  return /** @type{?proto.ROUTEINFO.info.location} */ (
    jspb.Message.getWrapperField(this, proto.ROUTEINFO.info.location, 1));
};


/**
 * @param {?proto.ROUTEINFO.info.location|undefined} value
 * @return {!proto.ROUTEINFO.info.bound} returns this
*/
proto.ROUTEINFO.info.bound.prototype.setNortheast = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ROUTEINFO.info.bound} returns this
 */
proto.ROUTEINFO.info.bound.prototype.clearNortheast = function() {
  return this.setNortheast(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ROUTEINFO.info.bound.prototype.hasNortheast = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional location southwest = 2;
 * @return {?proto.ROUTEINFO.info.location}
 */
proto.ROUTEINFO.info.bound.prototype.getSouthwest = function() {
  return /** @type{?proto.ROUTEINFO.info.location} */ (
    jspb.Message.getWrapperField(this, proto.ROUTEINFO.info.location, 2));
};


/**
 * @param {?proto.ROUTEINFO.info.location|undefined} value
 * @return {!proto.ROUTEINFO.info.bound} returns this
*/
proto.ROUTEINFO.info.bound.prototype.setSouthwest = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ROUTEINFO.info.bound} returns this
 */
proto.ROUTEINFO.info.bound.prototype.clearSouthwest = function() {
  return this.setSouthwest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ROUTEINFO.info.bound.prototype.hasSouthwest = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ROUTEINFO.info.line.prototype.toObject = function(opt_includeInstance) {
  return proto.ROUTEINFO.info.line.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ROUTEINFO.info.line} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ROUTEINFO.info.line.toObject = function(includeInstance, msg) {
  var f, obj = {
    points: msg.getPoints_asB64(),
    mbr: (f = msg.getMbr()) && Define_pb.MBRD.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ROUTEINFO.info.line}
 */
proto.ROUTEINFO.info.line.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ROUTEINFO.info.line;
  return proto.ROUTEINFO.info.line.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ROUTEINFO.info.line} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ROUTEINFO.info.line}
 */
proto.ROUTEINFO.info.line.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPoints(value);
      break;
    case 2:
      var value = new Define_pb.MBRD;
      reader.readMessage(value,Define_pb.MBRD.deserializeBinaryFromReader);
      msg.setMbr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ROUTEINFO.info.line.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ROUTEINFO.info.line.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ROUTEINFO.info.line} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ROUTEINFO.info.line.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPoints_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getMbr();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      Define_pb.MBRD.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes points = 1;
 * @return {!(string|Uint8Array)}
 */
proto.ROUTEINFO.info.line.prototype.getPoints = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes points = 1;
 * This is a type-conversion wrapper around `getPoints()`
 * @return {string}
 */
proto.ROUTEINFO.info.line.prototype.getPoints_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPoints()));
};


/**
 * optional bytes points = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPoints()`
 * @return {!Uint8Array}
 */
proto.ROUTEINFO.info.line.prototype.getPoints_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPoints()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ROUTEINFO.info.line} returns this
 */
proto.ROUTEINFO.info.line.prototype.setPoints = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional DEFINE.MBRD mbr = 2;
 * @return {?proto.DEFINE.MBRD}
 */
proto.ROUTEINFO.info.line.prototype.getMbr = function() {
  return /** @type{?proto.DEFINE.MBRD} */ (
    jspb.Message.getWrapperField(this, Define_pb.MBRD, 2));
};


/**
 * @param {?proto.DEFINE.MBRD|undefined} value
 * @return {!proto.ROUTEINFO.info.line} returns this
*/
proto.ROUTEINFO.info.line.prototype.setMbr = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ROUTEINFO.info.line} returns this
 */
proto.ROUTEINFO.info.line.prototype.clearMbr = function() {
  return this.setMbr(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ROUTEINFO.info.line.prototype.hasMbr = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ROUTEINFO.info.traffic_speed.prototype.toObject = function(opt_includeInstance) {
  return proto.ROUTEINFO.info.traffic_speed.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ROUTEINFO.info.traffic_speed} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ROUTEINFO.info.traffic_speed.toObject = function(includeInstance, msg) {
  var f, obj = {
    speed: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ROUTEINFO.info.traffic_speed}
 */
proto.ROUTEINFO.info.traffic_speed.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ROUTEINFO.info.traffic_speed;
  return proto.ROUTEINFO.info.traffic_speed.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ROUTEINFO.info.traffic_speed} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ROUTEINFO.info.traffic_speed}
 */
proto.ROUTEINFO.info.traffic_speed.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSpeed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ROUTEINFO.info.traffic_speed.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ROUTEINFO.info.traffic_speed.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ROUTEINFO.info.traffic_speed} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ROUTEINFO.info.traffic_speed.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSpeed();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 speed = 1;
 * @return {number}
 */
proto.ROUTEINFO.info.traffic_speed.prototype.getSpeed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ROUTEINFO.info.traffic_speed} returns this
 */
proto.ROUTEINFO.info.traffic_speed.prototype.setSpeed = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ROUTEINFO.info.link.prototype.toObject = function(opt_includeInstance) {
  return proto.ROUTEINFO.info.link.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ROUTEINFO.info.link} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ROUTEINFO.info.link.toObject = function(includeInstance, msg) {
  var f, obj = {
    attr: jspb.Message.getFieldWithDefault(msg, 1, 0),
    distance: (f = msg.getDistance()) && proto.ROUTEINFO.info.textvalue.toObject(includeInstance, f),
    duration: (f = msg.getDuration()) && proto.ROUTEINFO.info.textvalue.toObject(includeInstance, f),
    startLocation: (f = msg.getStartLocation()) && proto.ROUTEINFO.info.location.toObject(includeInstance, f),
    endLocation: (f = msg.getEndLocation()) && proto.ROUTEINFO.info.location.toObject(includeInstance, f),
    maneuver: jspb.Message.getFieldWithDefault(msg, 50, ""),
    htmlInstructions: jspb.Message.getFieldWithDefault(msg, 60, ""),
    laneguide: jspb.Message.getFieldWithDefault(msg, 70, ""),
    polyline: (f = msg.getPolyline()) && proto.ROUTEINFO.info.line.toObject(includeInstance, f),
    travelMode: jspb.Message.getFieldWithDefault(msg, 90, ""),
    roadObject: jspb.Message.getFieldWithDefault(msg, 100, ""),
    complexIntersection: jspb.Message.getFieldWithDefault(msg, 110, ""),
    serviceArea: jspb.Message.getFieldWithDefault(msg, 120, ""),
    tollgate: jspb.Message.getFieldWithDefault(msg, 130, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ROUTEINFO.info.link}
 */
proto.ROUTEINFO.info.link.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ROUTEINFO.info.link;
  return proto.ROUTEINFO.info.link.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ROUTEINFO.info.link} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ROUTEINFO.info.link}
 */
proto.ROUTEINFO.info.link.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAttr(value);
      break;
    case 10:
      var value = new proto.ROUTEINFO.info.textvalue;
      reader.readMessage(value,proto.ROUTEINFO.info.textvalue.deserializeBinaryFromReader);
      msg.setDistance(value);
      break;
    case 20:
      var value = new proto.ROUTEINFO.info.textvalue;
      reader.readMessage(value,proto.ROUTEINFO.info.textvalue.deserializeBinaryFromReader);
      msg.setDuration(value);
      break;
    case 30:
      var value = new proto.ROUTEINFO.info.location;
      reader.readMessage(value,proto.ROUTEINFO.info.location.deserializeBinaryFromReader);
      msg.setStartLocation(value);
      break;
    case 40:
      var value = new proto.ROUTEINFO.info.location;
      reader.readMessage(value,proto.ROUTEINFO.info.location.deserializeBinaryFromReader);
      msg.setEndLocation(value);
      break;
    case 50:
      var value = /** @type {string} */ (reader.readString());
      msg.setManeuver(value);
      break;
    case 60:
      var value = /** @type {string} */ (reader.readString());
      msg.setHtmlInstructions(value);
      break;
    case 70:
      var value = /** @type {string} */ (reader.readString());
      msg.setLaneguide(value);
      break;
    case 80:
      var value = new proto.ROUTEINFO.info.line;
      reader.readMessage(value,proto.ROUTEINFO.info.line.deserializeBinaryFromReader);
      msg.setPolyline(value);
      break;
    case 90:
      var value = /** @type {string} */ (reader.readString());
      msg.setTravelMode(value);
      break;
    case 100:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoadObject(value);
      break;
    case 110:
      var value = /** @type {string} */ (reader.readString());
      msg.setComplexIntersection(value);
      break;
    case 120:
      var value = /** @type {string} */ (reader.readString());
      msg.setServiceArea(value);
      break;
    case 130:
      var value = /** @type {string} */ (reader.readString());
      msg.setTollgate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ROUTEINFO.info.link.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ROUTEINFO.info.link.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ROUTEINFO.info.link} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ROUTEINFO.info.link.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAttr();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getDistance();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.ROUTEINFO.info.textvalue.serializeBinaryToWriter
    );
  }
  f = message.getDuration();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      proto.ROUTEINFO.info.textvalue.serializeBinaryToWriter
    );
  }
  f = message.getStartLocation();
  if (f != null) {
    writer.writeMessage(
      30,
      f,
      proto.ROUTEINFO.info.location.serializeBinaryToWriter
    );
  }
  f = message.getEndLocation();
  if (f != null) {
    writer.writeMessage(
      40,
      f,
      proto.ROUTEINFO.info.location.serializeBinaryToWriter
    );
  }
  f = message.getManeuver();
  if (f.length > 0) {
    writer.writeString(
      50,
      f
    );
  }
  f = message.getHtmlInstructions();
  if (f.length > 0) {
    writer.writeString(
      60,
      f
    );
  }
  f = message.getLaneguide();
  if (f.length > 0) {
    writer.writeString(
      70,
      f
    );
  }
  f = message.getPolyline();
  if (f != null) {
    writer.writeMessage(
      80,
      f,
      proto.ROUTEINFO.info.line.serializeBinaryToWriter
    );
  }
  f = message.getTravelMode();
  if (f.length > 0) {
    writer.writeString(
      90,
      f
    );
  }
  f = message.getRoadObject();
  if (f.length > 0) {
    writer.writeString(
      100,
      f
    );
  }
  f = message.getComplexIntersection();
  if (f.length > 0) {
    writer.writeString(
      110,
      f
    );
  }
  f = message.getServiceArea();
  if (f.length > 0) {
    writer.writeString(
      120,
      f
    );
  }
  f = message.getTollgate();
  if (f.length > 0) {
    writer.writeString(
      130,
      f
    );
  }
};


/**
 * optional uint32 attr = 1;
 * @return {number}
 */
proto.ROUTEINFO.info.link.prototype.getAttr = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ROUTEINFO.info.link} returns this
 */
proto.ROUTEINFO.info.link.prototype.setAttr = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional textvalue distance = 10;
 * @return {?proto.ROUTEINFO.info.textvalue}
 */
proto.ROUTEINFO.info.link.prototype.getDistance = function() {
  return /** @type{?proto.ROUTEINFO.info.textvalue} */ (
    jspb.Message.getWrapperField(this, proto.ROUTEINFO.info.textvalue, 10));
};


/**
 * @param {?proto.ROUTEINFO.info.textvalue|undefined} value
 * @return {!proto.ROUTEINFO.info.link} returns this
*/
proto.ROUTEINFO.info.link.prototype.setDistance = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ROUTEINFO.info.link} returns this
 */
proto.ROUTEINFO.info.link.prototype.clearDistance = function() {
  return this.setDistance(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ROUTEINFO.info.link.prototype.hasDistance = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional textvalue duration = 20;
 * @return {?proto.ROUTEINFO.info.textvalue}
 */
proto.ROUTEINFO.info.link.prototype.getDuration = function() {
  return /** @type{?proto.ROUTEINFO.info.textvalue} */ (
    jspb.Message.getWrapperField(this, proto.ROUTEINFO.info.textvalue, 20));
};


/**
 * @param {?proto.ROUTEINFO.info.textvalue|undefined} value
 * @return {!proto.ROUTEINFO.info.link} returns this
*/
proto.ROUTEINFO.info.link.prototype.setDuration = function(value) {
  return jspb.Message.setWrapperField(this, 20, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ROUTEINFO.info.link} returns this
 */
proto.ROUTEINFO.info.link.prototype.clearDuration = function() {
  return this.setDuration(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ROUTEINFO.info.link.prototype.hasDuration = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional location start_location = 30;
 * @return {?proto.ROUTEINFO.info.location}
 */
proto.ROUTEINFO.info.link.prototype.getStartLocation = function() {
  return /** @type{?proto.ROUTEINFO.info.location} */ (
    jspb.Message.getWrapperField(this, proto.ROUTEINFO.info.location, 30));
};


/**
 * @param {?proto.ROUTEINFO.info.location|undefined} value
 * @return {!proto.ROUTEINFO.info.link} returns this
*/
proto.ROUTEINFO.info.link.prototype.setStartLocation = function(value) {
  return jspb.Message.setWrapperField(this, 30, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ROUTEINFO.info.link} returns this
 */
proto.ROUTEINFO.info.link.prototype.clearStartLocation = function() {
  return this.setStartLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ROUTEINFO.info.link.prototype.hasStartLocation = function() {
  return jspb.Message.getField(this, 30) != null;
};


/**
 * optional location end_location = 40;
 * @return {?proto.ROUTEINFO.info.location}
 */
proto.ROUTEINFO.info.link.prototype.getEndLocation = function() {
  return /** @type{?proto.ROUTEINFO.info.location} */ (
    jspb.Message.getWrapperField(this, proto.ROUTEINFO.info.location, 40));
};


/**
 * @param {?proto.ROUTEINFO.info.location|undefined} value
 * @return {!proto.ROUTEINFO.info.link} returns this
*/
proto.ROUTEINFO.info.link.prototype.setEndLocation = function(value) {
  return jspb.Message.setWrapperField(this, 40, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ROUTEINFO.info.link} returns this
 */
proto.ROUTEINFO.info.link.prototype.clearEndLocation = function() {
  return this.setEndLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ROUTEINFO.info.link.prototype.hasEndLocation = function() {
  return jspb.Message.getField(this, 40) != null;
};


/**
 * optional string maneuver = 50;
 * @return {string}
 */
proto.ROUTEINFO.info.link.prototype.getManeuver = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 50, ""));
};


/**
 * @param {string} value
 * @return {!proto.ROUTEINFO.info.link} returns this
 */
proto.ROUTEINFO.info.link.prototype.setManeuver = function(value) {
  return jspb.Message.setProto3StringField(this, 50, value);
};


/**
 * optional string html_instructions = 60;
 * @return {string}
 */
proto.ROUTEINFO.info.link.prototype.getHtmlInstructions = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 60, ""));
};


/**
 * @param {string} value
 * @return {!proto.ROUTEINFO.info.link} returns this
 */
proto.ROUTEINFO.info.link.prototype.setHtmlInstructions = function(value) {
  return jspb.Message.setProto3StringField(this, 60, value);
};


/**
 * optional string laneguide = 70;
 * @return {string}
 */
proto.ROUTEINFO.info.link.prototype.getLaneguide = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 70, ""));
};


/**
 * @param {string} value
 * @return {!proto.ROUTEINFO.info.link} returns this
 */
proto.ROUTEINFO.info.link.prototype.setLaneguide = function(value) {
  return jspb.Message.setProto3StringField(this, 70, value);
};


/**
 * optional line polyline = 80;
 * @return {?proto.ROUTEINFO.info.line}
 */
proto.ROUTEINFO.info.link.prototype.getPolyline = function() {
  return /** @type{?proto.ROUTEINFO.info.line} */ (
    jspb.Message.getWrapperField(this, proto.ROUTEINFO.info.line, 80));
};


/**
 * @param {?proto.ROUTEINFO.info.line|undefined} value
 * @return {!proto.ROUTEINFO.info.link} returns this
*/
proto.ROUTEINFO.info.link.prototype.setPolyline = function(value) {
  return jspb.Message.setWrapperField(this, 80, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ROUTEINFO.info.link} returns this
 */
proto.ROUTEINFO.info.link.prototype.clearPolyline = function() {
  return this.setPolyline(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ROUTEINFO.info.link.prototype.hasPolyline = function() {
  return jspb.Message.getField(this, 80) != null;
};


/**
 * optional string travel_mode = 90;
 * @return {string}
 */
proto.ROUTEINFO.info.link.prototype.getTravelMode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 90, ""));
};


/**
 * @param {string} value
 * @return {!proto.ROUTEINFO.info.link} returns this
 */
proto.ROUTEINFO.info.link.prototype.setTravelMode = function(value) {
  return jspb.Message.setProto3StringField(this, 90, value);
};


/**
 * optional string road_object = 100;
 * @return {string}
 */
proto.ROUTEINFO.info.link.prototype.getRoadObject = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 100, ""));
};


/**
 * @param {string} value
 * @return {!proto.ROUTEINFO.info.link} returns this
 */
proto.ROUTEINFO.info.link.prototype.setRoadObject = function(value) {
  return jspb.Message.setProto3StringField(this, 100, value);
};


/**
 * optional string complex_intersection = 110;
 * @return {string}
 */
proto.ROUTEINFO.info.link.prototype.getComplexIntersection = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 110, ""));
};


/**
 * @param {string} value
 * @return {!proto.ROUTEINFO.info.link} returns this
 */
proto.ROUTEINFO.info.link.prototype.setComplexIntersection = function(value) {
  return jspb.Message.setProto3StringField(this, 110, value);
};


/**
 * optional string service_area = 120;
 * @return {string}
 */
proto.ROUTEINFO.info.link.prototype.getServiceArea = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 120, ""));
};


/**
 * @param {string} value
 * @return {!proto.ROUTEINFO.info.link} returns this
 */
proto.ROUTEINFO.info.link.prototype.setServiceArea = function(value) {
  return jspb.Message.setProto3StringField(this, 120, value);
};


/**
 * optional string tollgate = 130;
 * @return {string}
 */
proto.ROUTEINFO.info.link.prototype.getTollgate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 130, ""));
};


/**
 * @param {string} value
 * @return {!proto.ROUTEINFO.info.link} returns this
 */
proto.ROUTEINFO.info.link.prototype.setTollgate = function(value) {
  return jspb.Message.setProto3StringField(this, 130, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ROUTEINFO.info.path.repeatedFields_ = [70,80,90];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ROUTEINFO.info.path.prototype.toObject = function(opt_includeInstance) {
  return proto.ROUTEINFO.info.path.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ROUTEINFO.info.path} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ROUTEINFO.info.path.toObject = function(includeInstance, msg) {
  var f, obj = {
    distance: (f = msg.getDistance()) && proto.ROUTEINFO.info.textvalue.toObject(includeInstance, f),
    duration: (f = msg.getDuration()) && proto.ROUTEINFO.info.textvalue.toObject(includeInstance, f),
    startAddress: jspb.Message.getFieldWithDefault(msg, 30, ""),
    startLocation: (f = msg.getStartLocation()) && proto.ROUTEINFO.info.location.toObject(includeInstance, f),
    endAddress: jspb.Message.getFieldWithDefault(msg, 50, ""),
    endLocation: (f = msg.getEndLocation()) && proto.ROUTEINFO.info.location.toObject(includeInstance, f),
    stepsList: jspb.Message.toObjectList(msg.getStepsList(),
    proto.ROUTEINFO.info.link.toObject, includeInstance),
    trafficSpeedEntryList: jspb.Message.toObjectList(msg.getTrafficSpeedEntryList(),
    proto.ROUTEINFO.info.traffic_speed.toObject, includeInstance),
    viaWaypointList: jspb.Message.toObjectList(msg.getViaWaypointList(),
    proto.ROUTEINFO.info.location.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ROUTEINFO.info.path}
 */
proto.ROUTEINFO.info.path.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ROUTEINFO.info.path;
  return proto.ROUTEINFO.info.path.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ROUTEINFO.info.path} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ROUTEINFO.info.path}
 */
proto.ROUTEINFO.info.path.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 10:
      var value = new proto.ROUTEINFO.info.textvalue;
      reader.readMessage(value,proto.ROUTEINFO.info.textvalue.deserializeBinaryFromReader);
      msg.setDistance(value);
      break;
    case 20:
      var value = new proto.ROUTEINFO.info.textvalue;
      reader.readMessage(value,proto.ROUTEINFO.info.textvalue.deserializeBinaryFromReader);
      msg.setDuration(value);
      break;
    case 30:
      var value = /** @type {string} */ (reader.readString());
      msg.setStartAddress(value);
      break;
    case 40:
      var value = new proto.ROUTEINFO.info.location;
      reader.readMessage(value,proto.ROUTEINFO.info.location.deserializeBinaryFromReader);
      msg.setStartLocation(value);
      break;
    case 50:
      var value = /** @type {string} */ (reader.readString());
      msg.setEndAddress(value);
      break;
    case 60:
      var value = new proto.ROUTEINFO.info.location;
      reader.readMessage(value,proto.ROUTEINFO.info.location.deserializeBinaryFromReader);
      msg.setEndLocation(value);
      break;
    case 70:
      var value = new proto.ROUTEINFO.info.link;
      reader.readMessage(value,proto.ROUTEINFO.info.link.deserializeBinaryFromReader);
      msg.addSteps(value);
      break;
    case 80:
      var value = new proto.ROUTEINFO.info.traffic_speed;
      reader.readMessage(value,proto.ROUTEINFO.info.traffic_speed.deserializeBinaryFromReader);
      msg.addTrafficSpeedEntry(value);
      break;
    case 90:
      var value = new proto.ROUTEINFO.info.location;
      reader.readMessage(value,proto.ROUTEINFO.info.location.deserializeBinaryFromReader);
      msg.addViaWaypoint(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ROUTEINFO.info.path.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ROUTEINFO.info.path.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ROUTEINFO.info.path} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ROUTEINFO.info.path.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDistance();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.ROUTEINFO.info.textvalue.serializeBinaryToWriter
    );
  }
  f = message.getDuration();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      proto.ROUTEINFO.info.textvalue.serializeBinaryToWriter
    );
  }
  f = message.getStartAddress();
  if (f.length > 0) {
    writer.writeString(
      30,
      f
    );
  }
  f = message.getStartLocation();
  if (f != null) {
    writer.writeMessage(
      40,
      f,
      proto.ROUTEINFO.info.location.serializeBinaryToWriter
    );
  }
  f = message.getEndAddress();
  if (f.length > 0) {
    writer.writeString(
      50,
      f
    );
  }
  f = message.getEndLocation();
  if (f != null) {
    writer.writeMessage(
      60,
      f,
      proto.ROUTEINFO.info.location.serializeBinaryToWriter
    );
  }
  f = message.getStepsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      70,
      f,
      proto.ROUTEINFO.info.link.serializeBinaryToWriter
    );
  }
  f = message.getTrafficSpeedEntryList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      80,
      f,
      proto.ROUTEINFO.info.traffic_speed.serializeBinaryToWriter
    );
  }
  f = message.getViaWaypointList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      90,
      f,
      proto.ROUTEINFO.info.location.serializeBinaryToWriter
    );
  }
};


/**
 * optional textvalue distance = 10;
 * @return {?proto.ROUTEINFO.info.textvalue}
 */
proto.ROUTEINFO.info.path.prototype.getDistance = function() {
  return /** @type{?proto.ROUTEINFO.info.textvalue} */ (
    jspb.Message.getWrapperField(this, proto.ROUTEINFO.info.textvalue, 10));
};


/**
 * @param {?proto.ROUTEINFO.info.textvalue|undefined} value
 * @return {!proto.ROUTEINFO.info.path} returns this
*/
proto.ROUTEINFO.info.path.prototype.setDistance = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ROUTEINFO.info.path} returns this
 */
proto.ROUTEINFO.info.path.prototype.clearDistance = function() {
  return this.setDistance(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ROUTEINFO.info.path.prototype.hasDistance = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional textvalue duration = 20;
 * @return {?proto.ROUTEINFO.info.textvalue}
 */
proto.ROUTEINFO.info.path.prototype.getDuration = function() {
  return /** @type{?proto.ROUTEINFO.info.textvalue} */ (
    jspb.Message.getWrapperField(this, proto.ROUTEINFO.info.textvalue, 20));
};


/**
 * @param {?proto.ROUTEINFO.info.textvalue|undefined} value
 * @return {!proto.ROUTEINFO.info.path} returns this
*/
proto.ROUTEINFO.info.path.prototype.setDuration = function(value) {
  return jspb.Message.setWrapperField(this, 20, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ROUTEINFO.info.path} returns this
 */
proto.ROUTEINFO.info.path.prototype.clearDuration = function() {
  return this.setDuration(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ROUTEINFO.info.path.prototype.hasDuration = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional string start_address = 30;
 * @return {string}
 */
proto.ROUTEINFO.info.path.prototype.getStartAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 30, ""));
};


/**
 * @param {string} value
 * @return {!proto.ROUTEINFO.info.path} returns this
 */
proto.ROUTEINFO.info.path.prototype.setStartAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 30, value);
};


/**
 * optional location start_location = 40;
 * @return {?proto.ROUTEINFO.info.location}
 */
proto.ROUTEINFO.info.path.prototype.getStartLocation = function() {
  return /** @type{?proto.ROUTEINFO.info.location} */ (
    jspb.Message.getWrapperField(this, proto.ROUTEINFO.info.location, 40));
};


/**
 * @param {?proto.ROUTEINFO.info.location|undefined} value
 * @return {!proto.ROUTEINFO.info.path} returns this
*/
proto.ROUTEINFO.info.path.prototype.setStartLocation = function(value) {
  return jspb.Message.setWrapperField(this, 40, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ROUTEINFO.info.path} returns this
 */
proto.ROUTEINFO.info.path.prototype.clearStartLocation = function() {
  return this.setStartLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ROUTEINFO.info.path.prototype.hasStartLocation = function() {
  return jspb.Message.getField(this, 40) != null;
};


/**
 * optional string end_address = 50;
 * @return {string}
 */
proto.ROUTEINFO.info.path.prototype.getEndAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 50, ""));
};


/**
 * @param {string} value
 * @return {!proto.ROUTEINFO.info.path} returns this
 */
proto.ROUTEINFO.info.path.prototype.setEndAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 50, value);
};


/**
 * optional location end_location = 60;
 * @return {?proto.ROUTEINFO.info.location}
 */
proto.ROUTEINFO.info.path.prototype.getEndLocation = function() {
  return /** @type{?proto.ROUTEINFO.info.location} */ (
    jspb.Message.getWrapperField(this, proto.ROUTEINFO.info.location, 60));
};


/**
 * @param {?proto.ROUTEINFO.info.location|undefined} value
 * @return {!proto.ROUTEINFO.info.path} returns this
*/
proto.ROUTEINFO.info.path.prototype.setEndLocation = function(value) {
  return jspb.Message.setWrapperField(this, 60, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ROUTEINFO.info.path} returns this
 */
proto.ROUTEINFO.info.path.prototype.clearEndLocation = function() {
  return this.setEndLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ROUTEINFO.info.path.prototype.hasEndLocation = function() {
  return jspb.Message.getField(this, 60) != null;
};


/**
 * repeated link steps = 70;
 * @return {!Array<!proto.ROUTEINFO.info.link>}
 */
proto.ROUTEINFO.info.path.prototype.getStepsList = function() {
  return /** @type{!Array<!proto.ROUTEINFO.info.link>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ROUTEINFO.info.link, 70));
};


/**
 * @param {!Array<!proto.ROUTEINFO.info.link>} value
 * @return {!proto.ROUTEINFO.info.path} returns this
*/
proto.ROUTEINFO.info.path.prototype.setStepsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 70, value);
};


/**
 * @param {!proto.ROUTEINFO.info.link=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ROUTEINFO.info.link}
 */
proto.ROUTEINFO.info.path.prototype.addSteps = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 70, opt_value, proto.ROUTEINFO.info.link, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ROUTEINFO.info.path} returns this
 */
proto.ROUTEINFO.info.path.prototype.clearStepsList = function() {
  return this.setStepsList([]);
};


/**
 * repeated traffic_speed traffic_speed_entry = 80;
 * @return {!Array<!proto.ROUTEINFO.info.traffic_speed>}
 */
proto.ROUTEINFO.info.path.prototype.getTrafficSpeedEntryList = function() {
  return /** @type{!Array<!proto.ROUTEINFO.info.traffic_speed>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ROUTEINFO.info.traffic_speed, 80));
};


/**
 * @param {!Array<!proto.ROUTEINFO.info.traffic_speed>} value
 * @return {!proto.ROUTEINFO.info.path} returns this
*/
proto.ROUTEINFO.info.path.prototype.setTrafficSpeedEntryList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 80, value);
};


/**
 * @param {!proto.ROUTEINFO.info.traffic_speed=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ROUTEINFO.info.traffic_speed}
 */
proto.ROUTEINFO.info.path.prototype.addTrafficSpeedEntry = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 80, opt_value, proto.ROUTEINFO.info.traffic_speed, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ROUTEINFO.info.path} returns this
 */
proto.ROUTEINFO.info.path.prototype.clearTrafficSpeedEntryList = function() {
  return this.setTrafficSpeedEntryList([]);
};


/**
 * repeated location via_waypoint = 90;
 * @return {!Array<!proto.ROUTEINFO.info.location>}
 */
proto.ROUTEINFO.info.path.prototype.getViaWaypointList = function() {
  return /** @type{!Array<!proto.ROUTEINFO.info.location>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ROUTEINFO.info.location, 90));
};


/**
 * @param {!Array<!proto.ROUTEINFO.info.location>} value
 * @return {!proto.ROUTEINFO.info.path} returns this
*/
proto.ROUTEINFO.info.path.prototype.setViaWaypointList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 90, value);
};


/**
 * @param {!proto.ROUTEINFO.info.location=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ROUTEINFO.info.location}
 */
proto.ROUTEINFO.info.path.prototype.addViaWaypoint = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 90, opt_value, proto.ROUTEINFO.info.location, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ROUTEINFO.info.path} returns this
 */
proto.ROUTEINFO.info.path.prototype.clearViaWaypointList = function() {
  return this.setViaWaypointList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ROUTEINFO.info.route.repeatedFields_ = [30,70];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ROUTEINFO.info.route.prototype.toObject = function(opt_includeInstance) {
  return proto.ROUTEINFO.info.route.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ROUTEINFO.info.route} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ROUTEINFO.info.route.toObject = function(includeInstance, msg) {
  var f, obj = {
    copyrights: jspb.Message.getFieldWithDefault(msg, 10, ""),
    bounds: (f = msg.getBounds()) && proto.ROUTEINFO.info.bound.toObject(includeInstance, f),
    legsList: jspb.Message.toObjectList(msg.getLegsList(),
    proto.ROUTEINFO.info.path.toObject, includeInstance),
    overviewPolyline: (f = msg.getOverviewPolyline()) && proto.ROUTEINFO.info.line.toObject(includeInstance, f),
    summary: jspb.Message.getFieldWithDefault(msg, 50, ""),
    warnings: jspb.Message.getFieldWithDefault(msg, 60, ""),
    waypointOrderList: (f = jspb.Message.getRepeatedField(msg, 70)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ROUTEINFO.info.route}
 */
proto.ROUTEINFO.info.route.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ROUTEINFO.info.route;
  return proto.ROUTEINFO.info.route.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ROUTEINFO.info.route} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ROUTEINFO.info.route}
 */
proto.ROUTEINFO.info.route.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setCopyrights(value);
      break;
    case 20:
      var value = new proto.ROUTEINFO.info.bound;
      reader.readMessage(value,proto.ROUTEINFO.info.bound.deserializeBinaryFromReader);
      msg.setBounds(value);
      break;
    case 30:
      var value = new proto.ROUTEINFO.info.path;
      reader.readMessage(value,proto.ROUTEINFO.info.path.deserializeBinaryFromReader);
      msg.addLegs(value);
      break;
    case 40:
      var value = new proto.ROUTEINFO.info.line;
      reader.readMessage(value,proto.ROUTEINFO.info.line.deserializeBinaryFromReader);
      msg.setOverviewPolyline(value);
      break;
    case 50:
      var value = /** @type {string} */ (reader.readString());
      msg.setSummary(value);
      break;
    case 60:
      var value = /** @type {string} */ (reader.readString());
      msg.setWarnings(value);
      break;
    case 70:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt32());
      msg.setWaypointOrderList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ROUTEINFO.info.route.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ROUTEINFO.info.route.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ROUTEINFO.info.route} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ROUTEINFO.info.route.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCopyrights();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getBounds();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      proto.ROUTEINFO.info.bound.serializeBinaryToWriter
    );
  }
  f = message.getLegsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      30,
      f,
      proto.ROUTEINFO.info.path.serializeBinaryToWriter
    );
  }
  f = message.getOverviewPolyline();
  if (f != null) {
    writer.writeMessage(
      40,
      f,
      proto.ROUTEINFO.info.line.serializeBinaryToWriter
    );
  }
  f = message.getSummary();
  if (f.length > 0) {
    writer.writeString(
      50,
      f
    );
  }
  f = message.getWarnings();
  if (f.length > 0) {
    writer.writeString(
      60,
      f
    );
  }
  f = message.getWaypointOrderList();
  if (f.length > 0) {
    writer.writePackedInt32(
      70,
      f
    );
  }
};


/**
 * optional string copyrights = 10;
 * @return {string}
 */
proto.ROUTEINFO.info.route.prototype.getCopyrights = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.ROUTEINFO.info.route} returns this
 */
proto.ROUTEINFO.info.route.prototype.setCopyrights = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional bound bounds = 20;
 * @return {?proto.ROUTEINFO.info.bound}
 */
proto.ROUTEINFO.info.route.prototype.getBounds = function() {
  return /** @type{?proto.ROUTEINFO.info.bound} */ (
    jspb.Message.getWrapperField(this, proto.ROUTEINFO.info.bound, 20));
};


/**
 * @param {?proto.ROUTEINFO.info.bound|undefined} value
 * @return {!proto.ROUTEINFO.info.route} returns this
*/
proto.ROUTEINFO.info.route.prototype.setBounds = function(value) {
  return jspb.Message.setWrapperField(this, 20, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ROUTEINFO.info.route} returns this
 */
proto.ROUTEINFO.info.route.prototype.clearBounds = function() {
  return this.setBounds(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ROUTEINFO.info.route.prototype.hasBounds = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * repeated path legs = 30;
 * @return {!Array<!proto.ROUTEINFO.info.path>}
 */
proto.ROUTEINFO.info.route.prototype.getLegsList = function() {
  return /** @type{!Array<!proto.ROUTEINFO.info.path>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ROUTEINFO.info.path, 30));
};


/**
 * @param {!Array<!proto.ROUTEINFO.info.path>} value
 * @return {!proto.ROUTEINFO.info.route} returns this
*/
proto.ROUTEINFO.info.route.prototype.setLegsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 30, value);
};


/**
 * @param {!proto.ROUTEINFO.info.path=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ROUTEINFO.info.path}
 */
proto.ROUTEINFO.info.route.prototype.addLegs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 30, opt_value, proto.ROUTEINFO.info.path, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ROUTEINFO.info.route} returns this
 */
proto.ROUTEINFO.info.route.prototype.clearLegsList = function() {
  return this.setLegsList([]);
};


/**
 * optional line overview_polyline = 40;
 * @return {?proto.ROUTEINFO.info.line}
 */
proto.ROUTEINFO.info.route.prototype.getOverviewPolyline = function() {
  return /** @type{?proto.ROUTEINFO.info.line} */ (
    jspb.Message.getWrapperField(this, proto.ROUTEINFO.info.line, 40));
};


/**
 * @param {?proto.ROUTEINFO.info.line|undefined} value
 * @return {!proto.ROUTEINFO.info.route} returns this
*/
proto.ROUTEINFO.info.route.prototype.setOverviewPolyline = function(value) {
  return jspb.Message.setWrapperField(this, 40, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ROUTEINFO.info.route} returns this
 */
proto.ROUTEINFO.info.route.prototype.clearOverviewPolyline = function() {
  return this.setOverviewPolyline(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ROUTEINFO.info.route.prototype.hasOverviewPolyline = function() {
  return jspb.Message.getField(this, 40) != null;
};


/**
 * optional string summary = 50;
 * @return {string}
 */
proto.ROUTEINFO.info.route.prototype.getSummary = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 50, ""));
};


/**
 * @param {string} value
 * @return {!proto.ROUTEINFO.info.route} returns this
 */
proto.ROUTEINFO.info.route.prototype.setSummary = function(value) {
  return jspb.Message.setProto3StringField(this, 50, value);
};


/**
 * optional string warnings = 60;
 * @return {string}
 */
proto.ROUTEINFO.info.route.prototype.getWarnings = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 60, ""));
};


/**
 * @param {string} value
 * @return {!proto.ROUTEINFO.info.route} returns this
 */
proto.ROUTEINFO.info.route.prototype.setWarnings = function(value) {
  return jspb.Message.setProto3StringField(this, 60, value);
};


/**
 * repeated int32 waypoint_order = 70;
 * @return {!Array<number>}
 */
proto.ROUTEINFO.info.route.prototype.getWaypointOrderList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 70));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.ROUTEINFO.info.route} returns this
 */
proto.ROUTEINFO.info.route.prototype.setWaypointOrderList = function(value) {
  return jspb.Message.setField(this, 70, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.ROUTEINFO.info.route} returns this
 */
proto.ROUTEINFO.info.route.prototype.addWaypointOrder = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 70, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ROUTEINFO.info.route} returns this
 */
proto.ROUTEINFO.info.route.prototype.clearWaypointOrderList = function() {
  return this.setWaypointOrderList([]);
};


/**
 * repeated route routes = 10;
 * @return {!Array<!proto.ROUTEINFO.info.route>}
 */
proto.ROUTEINFO.info.prototype.getRoutesList = function() {
  return /** @type{!Array<!proto.ROUTEINFO.info.route>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ROUTEINFO.info.route, 10));
};


/**
 * @param {!Array<!proto.ROUTEINFO.info.route>} value
 * @return {!proto.ROUTEINFO.info} returns this
*/
proto.ROUTEINFO.info.prototype.setRoutesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.ROUTEINFO.info.route=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ROUTEINFO.info.route}
 */
proto.ROUTEINFO.info.prototype.addRoutes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.ROUTEINFO.info.route, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ROUTEINFO.info} returns this
 */
proto.ROUTEINFO.info.prototype.clearRoutesList = function() {
  return this.setRoutesList([]);
};


/**
 * optional int32 status = 20;
 * @return {number}
 */
proto.ROUTEINFO.info.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};


/**
 * @param {number} value
 * @return {!proto.ROUTEINFO.info} returns this
 */
proto.ROUTEINFO.info.prototype.setStatus = function(value) {
  return jspb.Message.setProto3IntField(this, 20, value);
};


/**
 * optional string status_msg = 30;
 * @return {string}
 */
proto.ROUTEINFO.info.prototype.getStatusMsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 30, ""));
};


/**
 * @param {string} value
 * @return {!proto.ROUTEINFO.info} returns this
 */
proto.ROUTEINFO.info.prototype.setStatusMsg = function(value) {
  return jspb.Message.setProto3StringField(this, 30, value);
};


goog.object.extend(exports, proto.ROUTEINFO);
